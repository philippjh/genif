
.. _program_listing_file_src_kernels_MaternKernel.h:

Program Listing for File MaternKernel.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_kernels_MaternKernel.h>` (``src/kernels/MaternKernel.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef GENIF_MATERNKERNEL_H
   #define GENIF_MATERNKERNEL_H
   
   #include "Kernel.h"
   
   namespace genif {
       class MaternKernel : public Kernel {
       public:
           using Kernel::operator();
   
           explicit MaternKernel(VectorX Sigma, unsigned int d = 3, data_t l = 1.0) : _d(d), _l(l), _Sigma(std::move(Sigma)) {
               if (!(d == 1 || d == 3 || d == 5))
                   throw std::runtime_error("MaternKernel::MaternKernel: Only d=1 or d=3 or d=5 is supported.");
           }
   
           data_t operator()(const VectorX& x1, const VectorX& x2) const override {
               if (_Sigma.size() != x1.size() || _Sigma.size() != x2.size())
                   throw std::runtime_error("MaternKernel::operator(): The scaling vector size does not conform to the input vector dimensionalities.");
               VectorX x1Scaled = x1;
               VectorX x2Scaled = x2;
               for (unsigned int i = 0; i < _Sigma.size(); i++) {
                   x1Scaled[i] = x1Scaled[i] / _Sigma[i];
                   x2Scaled[i] = x2Scaled[i] / _Sigma[i];
               }
   
               data_t K = (x1Scaled - x2Scaled).norm() * sqrt(_d);
   
               if (_d == 1)
                   return pow(_l, 2.0) * exp(-K);
               else if (_d == 3)
                   return pow(_l, 2.0) * (1.0 + K) * std::exp(-K);
               else if (_d == 5)
                   return pow(_l, 2.0) * (1.0 + K + pow(K, 2.0) / 3.0) * exp(-K);
               else
                   throw std::runtime_error("MaternKernel::operator(): Only d=1 or d=3 or d=5 is supported.");
           }
   
           unsigned int getD() const {
               return _d;
           }
   
           data_t getL() const {
               return _l;
           }
   
           const VectorX& getSigma() const {
               return _Sigma;
           }
   
       private:
           unsigned int _d = 3;
           data_t _l = 1.0;
           VectorX _Sigma;
       };
   }
   
   #endif // GENIF_MATERNKERNEL_H
